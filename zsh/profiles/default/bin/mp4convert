#!/bin/zsh
set -e

CREATION_DATE_ENV="${CREATION_DATE}"

for OLD_FILE in "$@"; do

  OLD_FILE_EXTENSION="${OLD_FILE##*.}"
  OLD_FILE_BASENAME="$(basename ${OLD_FILE%.*})"
  CONVERSION_FILE="${OLD_FILE_BASENAME} ðŸŸ¡ CONVERSION.mp4"

  if [[ "${TITLE}" != "" ]]; then
    FFMPEG_COMPUTED_OPTIONS="-metadata title=\"${TITLE}\""
  fi

  if [[ "${VIDEO_TAG}" == "" ]]; then
    if [[ ${VIDEO_CODEC:-libx265} == "libx265" ]]; then
      # H.265 with the standard tag "hev1" doesn't play video on an iPad, so we explicitly set the -tag:v value to "hvc1".
      VIDEO_TAG="hvc1"
    elif [[ ${VIDEO_CODEC} == "libx264" ]]; then
      VIDEO_TAG="avc1"
    fi
  fi

  ffmpeg -y \
    -i "${OLD_FILE}" \
    -c:v ${VIDEO_CODEC:-libx265} -crf ${VIDEO_CRF:-23} -tag:v ${VIDEO_TAG} ${VIDEO_OPTIONS} \
    -movflags +faststart+use_metadata_tags \
    ${FFMPEG_COMPUTED_OPTIONS} \
    ${FFMPEG_OPTIONS} \
    "${CONVERSION_FILE}"

  CREATION_DATE="${CREATION_DATE_ENV}"
  if [[ "${CREATION_DATE}" == "file" ]]; then
    CREATION_DATE=$(date -r "${OLD_FILE}" +"%Y-%m-%dT%H:%M:%S")
  fi
  if [[ "${CREATION_DATE}" == "" ]]; then
    CREATION_DATE=$(ffprobe "${OLD_FILE}" -show_entries format_tags=creation_time -of compact=p=0:nk=1 -v 0 || echo "")
  fi
  if [[ "${CREATION_DATE}" == "" || "${CREATION_DATE}" == "1970-01-01T00:00:00.000000Z" ]]; then
    CREATION_DATE=$(date -r "${OLD_FILE}" +"%Y-%m-%dT%H:%M:%S")
  fi
  touch -d "${CREATION_DATE}" "${CONVERSION_FILE}"

  NEW_FILE="${OLD_FILE_BASENAME}.mp4"

  if [[ -f "${NEW_FILE}" ]]; then
    ARCHIVE_FILE_CODEC=$(ffprobe "${NEW_FILE}" -select_streams v:0 -show_entries stream=codec_name -of compact=p=0:nk=1 -v 0 | head -n1 || echo "unknown")
    for COUNTER in {0..20}; do
      ARCHIVE_FILE_BASENAME="${OLD_FILE_BASENAME} ðŸ”´ OLD [${ARCHIVE_FILE_CODEC:-unknown}]"
      if [[ "$COUNTER" -gt "0" ]]; then
        ARCHIVE_FILE_BASENAME="${ARCHIVE_FILE_BASENAME} (${COUNTER})"
      fi
      ARCHIVE_FILE="${ARCHIVE_FILE_BASENAME}.mp4"
      if [[ ! -f "${ARCHIVE_FILE}" ]]; then
        mv "${NEW_FILE}" "${ARCHIVE_FILE}"
        break
      fi
    done
  fi

  if [[ -f "${NEW_FILE}" ]]; then
    fail "Cannot move temporary conversion file as target file already exists at: $(realpath ${NEW_FILE})"
  else
    mv "${CONVERSION_FILE}" "${NEW_FILE}"
  fi

done
